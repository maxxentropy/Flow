{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "MCP Server API",
		"description": "Comprehensive Postman collection for testing the Model Context Protocol (MCP) Server implementation with MultiplexingMcpServer architecture.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Server Info & Health",
			"item": [
				{
					"name": "Get Server Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Get basic server information and available endpoints"
					},
					"response": []
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check server health status and service availability"
					},
					"response": []
				}
			],
			"description": "Basic server information and health monitoring endpoints"
		},
		{
			"name": "MCP Protocol Flow (SSE)",
			"item": [
				{
					"name": "1. Initialize Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is valid JSON-RPC\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jsonrpc', '2.0');",
									"    pm.expect(jsonData).to.have.property('id', 1);",
									"    pm.expect(jsonData).to.have.property('result');",
									"});",
									"",
									"pm.test(\"Initialize result is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    const result = jsonData.result;",
									"    pm.expect(result).to.have.property('protocolVersion', '0.1.0');",
									"    pm.expect(result).to.have.property('serverInfo');",
									"    pm.expect(result).to.have.property('capabilities');",
									"    pm.expect(result.serverInfo).to.have.property('name');",
									"    pm.expect(result.serverInfo).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"id\": 1,\n  \"params\": {\n    \"protocolVersion\": \"0.1.0\",\n    \"capabilities\": {},\n    \"clientInfo\": {\n      \"name\": \"Postman Test Client\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Initialize the MCP connection with protocol handshake"
					},
					"response": []
				},
				{
					"name": "2. Send Initialized Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Send initialized notification to complete the handshake"
					},
					"response": []
				},
				{
					"name": "3. List Available Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains tools\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.have.property('tools');",
									"    pm.expect(jsonData.result.tools).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Contains expected tools\", function () {",
									"    const jsonData = pm.response.json();",
									"    const toolNames = jsonData.result.tools.map(tool => tool.name);",
									"    pm.expect(toolNames).to.include('echo');",
									"    pm.expect(toolNames).to.include('calculator');",
									"    pm.expect(toolNames).to.include('datetime');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/list\",\n  \"id\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "List all available tools after initialization"
					},
					"response": []
				},
				{
					"name": "4. Execute Echo Tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tool execution successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.have.property('content');",
									"    pm.expect(jsonData.result.content).to.be.an('array');",
									"    pm.expect(jsonData.result.content[0]).to.have.property('type', 'text');",
									"    pm.expect(jsonData.result.content[0].text).to.include('Hello from Postman');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": 3,\n  \"params\": {\n    \"name\": \"echo\",\n    \"arguments\": {\n      \"message\": \"Hello from Postman!\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Execute the echo tool with a test message"
					},
					"response": []
				},
				{
					"name": "5. Execute Calculator Tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Calculator result is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.content[0].text).to.include('42');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": 4,\n  \"params\": {\n    \"name\": \"calculator\",\n    \"arguments\": {\n      \"expression\": \"6 * 7\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Execute the calculator tool with a mathematical expression"
					},
					"response": []
				},
				{
					"name": "6. Execute DateTime Tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"DateTime result contains timestamp\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.content[0].text).to.match(/\\d{4}-\\d{2}-\\d{2}/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": 5,\n  \"params\": {\n    \"name\": \"datetime\",\n    \"arguments\": {\n      \"format\": \"yyyy-MM-dd HH:mm:ss\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Execute the datetime tool to get current timestamp"
					},
					"response": []
				}
			],
			"description": "Complete MCP protocol flow via Server-Sent Events endpoint"
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "List Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains resources\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.have.property('resources');",
									"    pm.expect(jsonData.result.resources).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"id\": 6\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "List all available resources"
					},
					"response": []
				},
				{
					"name": "Read Resource",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/read\",\n  \"id\": 7,\n  \"params\": {\n    \"uri\": \"file://./README.md\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Read a specific resource by URI"
					},
					"response": []
				}
			],
			"description": "Resource management endpoints"
		},
		{
			"name": "Prompts",
			"item": [
				{
					"name": "List Prompts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains prompts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.result).to.have.property('prompts');",
									"    pm.expect(jsonData.result.prompts).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"prompts/list\",\n  \"id\": 8\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "List all available prompts"
					},
					"response": []
				},
				{
					"name": "Get Prompt",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"prompts/get\",\n  \"id\": 9,\n  \"params\": {\n    \"name\": \"example-prompt\",\n    \"arguments\": {\n      \"topic\": \"MCP Server\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Get a specific prompt with arguments"
					},
					"response": []
				}
			],
			"description": "Prompt management endpoints"
		},
		{
			"name": "Utility Methods",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ping response is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('jsonrpc', '2.0');",
									"    pm.expect(jsonData).to.have.property('id', 10);",
									"    pm.expect(jsonData).to.have.property('result');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ping\",\n  \"id\": 10\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Send ping to test server responsiveness"
					},
					"response": []
				},
				{
					"name": "Cancel Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"cancel\",\n  \"id\": 11,\n  \"params\": {\n    \"requestId\": \"some-request-id\",\n    \"reason\": \"User requested cancellation\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Cancel a long-running request"
					},
					"response": []
				}
			],
			"description": "Utility methods for testing and maintenance"
		},
		{
			"name": "Error Scenarios",
			"item": [
				{
					"name": "Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns JSON-RPC parse error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error.code).to.be.oneOf([-32700, -32603]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ invalid json"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Test error handling with invalid JSON"
					},
					"response": []
				},
				{
					"name": "Unknown Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns method not found error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error.code).to.equal(-32601);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"unknown/method\",\n  \"id\": 12\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Test error handling with unknown method"
					},
					"response": []
				},
				{
					"name": "Invalid Tool Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns tool not found error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": 13,\n  \"params\": {\n    \"name\": \"nonexistent-tool\",\n    \"arguments\": {}\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Test error handling with invalid tool name"
					},
					"response": []
				},
				{
					"name": "Request Without Initialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns initialization required error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error.message).to.include('not initialized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/list\",\n  \"id\": 14\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Test that requests without initialization are rejected"
					},
					"response": []
				}
			],
			"description": "Test error handling and edge cases"
		},
		{
			"name": "Authentication & Security",
			"item": [
				{
					"name": "OAuth Login Flow Start",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/oauth/google/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"oauth",
								"google",
								"login"
							]
						},
						"description": "Start OAuth login flow with Google"
					},
					"response": []
				},
				{
					"name": "Session Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/session/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"session",
								"status"
							]
						},
						"description": "Check current session status"
					},
					"response": []
				},
				{
					"name": "User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"user",
								"profile"
							]
						},
						"description": "Get current user profile"
					},
					"response": []
				}
			],
			"description": "Authentication and security related endpoints"
		},
		{
			"name": "Load Testing",
			"item": [
				{
					"name": "Concurrent Tool Executions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": {{$randomInt}},\n  \"params\": {\n    \"name\": \"echo\",\n    \"arguments\": {\n      \"message\": \"Load test message {{$randomInt}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Use this for load testing - run multiple times concurrently"
					},
					"response": []
				},
				{
					"name": "Heavy Calculator Operation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"id\": {{$randomInt}},\n  \"params\": {\n    \"name\": \"calculator\",\n    \"arguments\": {\n      \"expression\": \"{{$randomInt}} * {{$randomInt}} + {{$randomInt}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sse",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sse"
							]
						},
						"description": "Test server performance with calculations"
					},
					"response": []
				}
			],
			"description": "Performance and load testing requests"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set common variables",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:5080');",
					"}",
					"",
					"// Generate correlation ID for tracing",
					"pm.environment.set('correlationId', pm.variables.replaceIn('{{$guid}}'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global tests for all requests",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5080",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionId",
			"value": "",
			"type": "string"
		}
	]
}