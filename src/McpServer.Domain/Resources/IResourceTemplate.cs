namespace McpServer.Domain.Resources;

/// <summary>
/// Defines a template for dynamically generating resources.
/// </summary>
public interface IResourceTemplate
{
    /// <summary>
    /// Gets the URI pattern for this template.
    /// Supports placeholders like {id}, {name}, etc.
    /// </summary>
    string UriPattern { get; }
    
    /// <summary>
    /// Gets the name of this template.
    /// </summary>
    string Name { get; }
    
    /// <summary>
    /// Gets the description of this template.
    /// </summary>
    string? Description { get; }
    
    /// <summary>
    /// Gets the MIME type for resources generated by this template.
    /// </summary>
    string? MimeType { get; }
    
    /// <summary>
    /// Checks if a URI matches this template.
    /// </summary>
    /// <param name="uri">The URI to check.</param>
    /// <returns>True if the URI matches the template pattern.</returns>
    bool Matches(string uri);
    
    /// <summary>
    /// Extracts parameters from a URI that matches this template.
    /// </summary>
    /// <param name="uri">The URI to extract parameters from.</param>
    /// <returns>A dictionary of parameter names and values.</returns>
    IDictionary<string, string> ExtractParameters(string uri);
    
    /// <summary>
    /// Generates a concrete URI from the template using the provided parameters.
    /// </summary>
    /// <param name="parameters">The parameters to use.</param>
    /// <returns>The generated URI.</returns>
    string GenerateUri(IDictionary<string, string> parameters);
}

/// <summary>
/// Provides resources based on templates.
/// </summary>
public interface ITemplateResourceProvider : IResourceProvider
{
    /// <summary>
    /// Gets the templates supported by this provider.
    /// </summary>
    IReadOnlyCollection<IResourceTemplate> Templates { get; }
    
    /// <summary>
    /// Lists available resources that can be generated from templates.
    /// </summary>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>Available template instances.</returns>
    Task<IEnumerable<TemplateResourceInstance>> ListTemplateInstancesAsync(CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Reads a resource using a template.
    /// </summary>
    /// <param name="resourceTemplate">The template to use.</param>
    /// <param name="parameters">The parameters for the template.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>The resource content.</returns>
    Task<ResourceContent> ReadTemplateResourceAsync(
        IResourceTemplate resourceTemplate, 
        IDictionary<string, string> parameters, 
        CancellationToken cancellationToken = default);
}

/// <summary>
/// Represents an instance of a resource that can be generated from a template.
/// </summary>
public record TemplateResourceInstance
{
    /// <summary>
    /// Gets the template used for this instance.
    /// </summary>
    public required IResourceTemplate Template { get; init; }
    
    /// <summary>
    /// Gets the parameters for this instance.
    /// </summary>
    public required IDictionary<string, string> Parameters { get; init; }
    
    /// <summary>
    /// Gets the generated URI for this instance.
    /// </summary>
    public string Uri => Template.GenerateUri(Parameters);
    
    /// <summary>
    /// Gets the display name for this instance.
    /// </summary>
    public string? DisplayName { get; init; }
    
    /// <summary>
    /// Gets additional metadata for this instance.
    /// </summary>
    public IDictionary<string, object>? Metadata { get; init; }
}